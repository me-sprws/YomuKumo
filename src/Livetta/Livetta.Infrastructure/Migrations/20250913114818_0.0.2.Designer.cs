// <auto-generated />
using System;
using Livetta.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Livetta.Infrastructure.Migrations
{
    [DbContext(typeof(LivettaDbContext))]
    [Migration("20250913114818_0.0.2")]
    partial class _002
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Livetta.Domain.Entities.Apartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("address");

                    b.Property<double>("Area")
                        .HasMaxLength(500)
                        .HasColumnType("double precision")
                        .HasColumnName("area");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Floor")
                        .HasMaxLength(100)
                        .HasColumnType("integer")
                        .HasColumnName("floor");

                    b.Property<int>("Room")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("room");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_apartments");

                    b.ToTable("apartments", (string)null);
                });

            modelBuilder.Entity("Livetta.Domain.Entities.Contacts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<Guid>("ResidentId")
                        .HasColumnType("uuid")
                        .HasColumnName("resident_id");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_contacts");

                    b.HasIndex("ResidentId")
                        .IsUnique()
                        .HasDatabaseName("ix_contacts_resident_id");

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("Livetta.Domain.Entities.Messaging.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_chats");

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("Livetta.Domain.Entities.Messaging.ChatResident", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ResidentId")
                        .HasColumnType("uuid")
                        .HasColumnName("resident_id");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_chat_resident");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_chat_resident_chat_id");

                    b.HasIndex("ResidentId")
                        .HasDatabaseName("ix_chat_resident_resident_id");

                    b.ToTable("chat_resident", (string)null);
                });

            modelBuilder.Entity("Livetta.Domain.Entities.Messaging.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("ResidentId")
                        .HasColumnType("uuid")
                        .HasColumnName("resident_id");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_messages_chat_id");

                    b.HasIndex("ResidentId")
                        .HasDatabaseName("ix_messages_resident_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Livetta.Domain.Entities.Resident", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_residents");

                    b.ToTable("residents", (string)null);
                });

            modelBuilder.Entity("Livetta.Domain.Entities.ResidentApartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("apartment_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ResidentId")
                        .HasColumnType("uuid")
                        .HasColumnName("resident_id");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("role");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_resident_apartment");

                    b.HasIndex("ApartmentId")
                        .HasDatabaseName("ix_resident_apartment_apartment_id");

                    b.HasIndex("ResidentId")
                        .HasDatabaseName("ix_resident_apartment_resident_id");

                    b.ToTable("resident_apartment", (string)null);
                });

            modelBuilder.Entity("Livetta.Domain.Entities.Contacts", b =>
                {
                    b.HasOne("Livetta.Domain.Entities.Resident", null)
                        .WithOne("Contacts")
                        .HasForeignKey("Livetta.Domain.Entities.Contacts", "ResidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contacts_residents_resident_id");
                });

            modelBuilder.Entity("Livetta.Domain.Entities.Messaging.ChatResident", b =>
                {
                    b.HasOne("Livetta.Domain.Entities.Messaging.Chat", "Chat")
                        .WithMany("Residents")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_resident_chats_chat_id");

                    b.HasOne("Livetta.Domain.Entities.Resident", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_resident_residents_resident_id");

                    b.Navigation("Chat");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("Livetta.Domain.Entities.Messaging.Message", b =>
                {
                    b.HasOne("Livetta.Domain.Entities.Messaging.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_chats_chat_id");

                    b.HasOne("Livetta.Domain.Entities.Resident", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_messages_residents_resident_id");

                    b.Navigation("Chat");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("Livetta.Domain.Entities.ResidentApartment", b =>
                {
                    b.HasOne("Livetta.Domain.Entities.Apartment", "Apartment")
                        .WithMany("Residents")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_resident_apartment_apartments_apartment_id");

                    b.HasOne("Livetta.Domain.Entities.Resident", "Resident")
                        .WithMany("Apartments")
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_resident_apartment_residents_resident_id");

                    b.Navigation("Apartment");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("Livetta.Domain.Entities.Apartment", b =>
                {
                    b.Navigation("Residents");
                });

            modelBuilder.Entity("Livetta.Domain.Entities.Messaging.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Residents");
                });

            modelBuilder.Entity("Livetta.Domain.Entities.Resident", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("Contacts")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
